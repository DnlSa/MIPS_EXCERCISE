.data
# iso ji e non j perche j e un istruzione e al compilatore non piace che usi istruzioni come comandi 
A: .word 1 2 3  4 5 6  7 8 9 
N: .word 3
ji: .word 2
k: .word 4
.text
.globl main
main: 
	la $a0 , A # a0 = &A
	la $a1 ,N
	lw $a1 , 0($a1) # a1 = N
	la $a2 , ji      
	lw $a2 , 0($a2) # $a2 = J
	la $a3 , k
	lw $a3 , 0($a3) # a3 = k
	jal esercizio
	add $a0 , $v0 , $0 
	li $v0 ,1
	syscall
        li $v0 , 10
        syscall
 
 # mi tocca usare la convenzione di chiamata in quando non e un procedura foglia e 
 # soprattutto usero un altra procedura che non mi permettera di capire se i registri argomento ecc 
 #vengano mantenuti , 
esercizio: 
	addi $sp , $sp , -20
	sw $ra, 0($sp)
	sw $s0, 4($sp)
	sw $s1, 8($sp)
	sw $s2,12($sp)
	sw $s3,16($sp)
	add $s0 , $a0 , $0 # s0 <- &A	
	add $s1 , $a1 , $0 # s1 <- N
	add $s2 , $a2 , $0 # s2 <- j
	add $s3 , $a3 , $0 # s3 <- k  # 
	add $t0 , $0 , $0 # itero con t0
	sll $t2 , $s1 , 2 # calcolo spiazzamento per ogni riga t2 = 4*3 = 12
	mult $t2 ,  $s2 #
	mflo $t2   # t2 = 12*j-esima riga scelta
	add $t3 , $t2 , $s0  # A[j][0] -> vado alla riga scelta
	
	add $t5 , $0 , $0  # inizializzo t5 a 0 percche non so cosa c e dentro  
for: 	slt $t1 , $t0 , $s1 # for(i=0 ; i<n ; i++)
	beq $t1 , $0 , exit_for
	lw $t4 , 0($t3) # carico valore in t4 
	add $t5 , $t5 , $t4 # aggiungo a t5
	add $t0 , $t0 , 1 # i++
	add $t3 , $t3 , 4  # A[j][1]  cambio la colonna in quanto distanziatadi un int 
	j for
 
 exit_for:  add $a0 , $t5 , $0 # contieme 
 	    add $a1 , $0 , $a3  
 	   jal multiplo # retistituisce quello che cerco da v0    
	   lw $ra, 0($sp)
	   lw $s0, 4($sp)
       	   lw $s1, 8($sp)
	   lw $s2,12($sp)
	   lw $s3,16($sp)
 	   addi $sp , $sp , 20
 	   jr $ra
  # passa $a0 , $a1 e restituisce 1 se a0 e multiplo di a1 0 altrimenti 
 multiplo: div $a0  , $a1 # faccio la divisione  
	   mfhi $t0   # se il resto e 0 allora sicuramentee multiplo  
	   beq $t0 , $0 , multi # goto multi <- se (resto == 0) 
	   add $v0 , $0 , $0 # if(resto != 0)  
	   jr $ra #return 0
	   
multi: 	addi $v0  ,$0 , 1 # if(resto == 0)
	jr $ra   # retrun 1
 	