.data 
A: .word 1 2 3 4 5 6 7 8
B: .word 1 2 3 4 5 5 6 7 
n: .word 8
.text
.globl main 

main:
	la $a0 , A
	la $a1 , B
	la $a2 , n
	lw $a2 , 0($a2)
	jal array
	li $v0 ,10 
	syscall
	
array: addi $sp , $sp , -20
	sw $ra , 0($sp)
	sw $s0 , 4($sp)
	sw $s1 , 8($sp)
	sw $s2 , 12($sp)
	sw $s3 , 16($sp)
	
	addi $s0 , $a0 , 0 # s0 = &A
	addi $s1 , $a1 , 0 # s1 = &B
	addi $s2 , $a2 , 0 # s2 = n 
	add $t0 , $s2 , -1 # t2 = n-1
	addi $s3 , $0 , 0 # s3 = i = 0
	
for:  beq $s3 , $t0 , exit_for # for(i=0 ; i<n ; i++)
      lw $t1 , 0($s1) # t1 = B[i]
      sub $t2 , $s2 , $s3 # n-i
      addi $t2 , $t2 , -1 # (n-i)-1
      sll $t2 , $t2 , 2 # 4*(n-1-i) ogni intero sono 4 byte 
      add $t4 , $s0 , $t2 # s0  deve punta sempre al principio 
      lw $t3 , 0($t4) # A[n-1-i]      
      add $t1 , $t1 , $t3
      sw $t1 , 0($s1) # B[i] <- B[i]+A[n-1-i]
      addi $s3 , $s3 , 1 # i++
      add $s1 , $s1 , 4 # b[i+1]
      j for
  
exit_for : 
	lw $ra , 0($sp)
	lw $s0 , 4($sp)
	lw $s1 , 8($sp)
	lw $s2 , 12($sp)
	lw $s3 , 16($sp)
	addi $sp , $sp , 20
	jr $ra