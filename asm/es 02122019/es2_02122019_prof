.data 

A : .word 1 2 3 4 5 6 7 8 
m : .word 8 
k : .word 4
h : .word 7

.text 
.globl main

main:
	la $a0 , A # carico in a0 l indirizzo array 
	
	la $a1 , m
	lw $a1 , 0($a1) # carico in a1 = m
	
	la $a2 , k
	lw $a2, 0($a2) # carico in a2 = k
	
	la $a3 , h
	lw $a3 , 0($a3) # carico in a3 = h
	
	jal conta_sost
	addi $a0 , $v0 , 0 
	
	li $v0 , 4  # stampa valore di ritorno 
	syscall 
	
	li $v0 , 10 # return
	syscall 



conta_sost: # conta sostituzioni fatte 
	addi $t0 , $0 , 1          # $t0 =1
	bne $a1 , $t0 , ricorsione # if (m!=1) -> go to ricorsione 
	lw $t0 , 0($a0) # t0 = A[0]
	beq $t0 , $a2 , ret1 # if(A[0]== k) -> go to ret1
	add $v0 , $0 , $0  # else return 0
	jr $ra # return id uscira 
	
ret1: 
	sw $a3 , 0($a0)  # A[0] = h
	addi $v0 ,$0 , 1 # reutrn 1
	jr $ra # return 


ricorsione:
	addi $sp , $sp , -16 # salvo valori nello stack 
	sw $ra , 0($sp)
	sw $s0 , 4($sp)
	sw $s1 , 8($sp)
	sw $s2 , 12($sp)
	
	#PRIMA CHIAMATA RICORSIVA # conta_sost(A , m/2,k,h)
	add $s0 , $a0 , $0 # salvo argomenti nello stack per preservarli 
	add $s1, $a1 , $0 #  salvo argomenti nello stack 
	srl $a1 , $a1 , 1 # modifico il a1 = m/2
	jal conta_sost # conta_sost(A , m/2,k,h)
	add $s2 , $v0 , $0  # qui ho il valore di ritorno di  conta_sost(A , m/2,k,h) # IMPORTANTE 
	
	#secvond PARTE DELLA RICORSIONE 
	sll $t0 , $s1 , 1 # riprendo m/2 devo moltiplicarlo per 4 (grandezza di un intero) e trovo lo spiazzamento da apllicare ad A 
	add $a0 , $s0 , $t0 # A[0]+m/2;
	srl $a1 , $s1 , 1 # s1 = m lo divido per avere m/2
	jal conta_sost  # chiamo la funzione # conta_sost(A/2 , m/2,k,h)
	
	#SOMMA conta_sost(A , m/2,k,h) + conta_sost(A/2 , m/2,k,h)
	add $v0 , $s2 , $v0 # sommo valore di ritorno della preedente (s2) con il valore di ritorno della nuova (v0) 
	
	lw $ra , 0($sp) # push dei valori 
	lw $s0 , 4($sp)
	lw $s1 , 8($sp)
	lw $s2 , 12($sp)
	addi $sp , $sp , 16
	jr $ra
	
	
	
	
#vediamo tale soluzione e  che prima mette i casi base di uscita  in seguito fa la prima chimata ricorsiva
#poi aggiusta i valori perc haimare la seconda , vedi chesll e moltiplicato per 2 perche fa m/2 * size_int
# chiamata la seconda poi somma i valori di ritorno 
