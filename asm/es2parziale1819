.data 
i: .word 5
.text
 .globl main
 
 main:  la $a0, i
 	lw $a0 , 0($a0)
 	jal f
 	addi $a0 , $v0 , 0
 	li $v0 , 4
 	syscall
 	li $v0 , 10 
 	syscall
 	
 f: addi $sp , $sp , -20 # pop dei valori nello stack 
 	sw $ra , 0($sp)
 	sw $s0 , 4($sp)
 	sw $s1 , 8($sp)
 	sw $s2 , 12($sp)
 	sw $s3 , 16($sp)
 	
 	addi $s0 , $a0 , 0 # $s0 = i ; 
 	add $t0 , $0 , 2 #t0 = 2
	slt $t1 , $s0 , $t0 # i<0
	bne $t1 , $0 , exit # if(i<2) -> goto exit , else continue  
	addi $a0 , $a0 , -2 
	jal f 
	add $s1, $v0 ,$0 # salvo valroe 
 	sll $s1 , $s1 , 1 # 2*f(i-2)
 	
 	lw $a0, 4($sp) # ripristino i come argomento 
 	addi $a1 , $a0 , -1 # a1 = i-1
 	jal g # g(i-1)
 	add $s2, $0 , $v0 # salvo ritorno di g(i-1)
 	addi $t3 , $0 , 5
	mult $s2 , $t3
	mflo $s2 # 5 * g(i-1)
	lw $s3, 4($sp) # $s3 = i
	addi $s3 , $s3 , -3 # s3 = i-3
	
	add $v0 , $s1 , $s2 # v0 = 2*f(i-2) + 5*g(i-1)
	add $v0 , $v0 , $s3 # v0 = v0 + (i-3)
	
	lw $ra , 0($sp) # pop valori da stack
 	lw $s0 , 4($sp)
 	lw $s1 , 8($sp)
 	lw $s2 , 12($sp)
 	lw $s3 , 16($sp)
	addi $sp , $sp , 20 
	jr $ra # return 

 exit: addi $v0 , $0 , 1 # return 1
 	jr $ra 

 g:  add $sp , $sp , -8
     sw $ra , 0($sp)
     sw $s0 , 4($sp)
     
     add $s0 , $a1 , $0 # s0 = i
     add $t0  , $0 , 3 # t0 = 3
     slt $t1 , $s0 , $t0 # if(i < 3) -> goto exi_1
     bne $t1 , $0 , exit_1  # else -> continue 
 	#implementare adesso il min di f(i/2) , g(i-1), i
     add $a2 , $a1 , $0 # i 
     add $a0 , $a1 , $0 # a1 = a0 = i
     srl $a0 , $a0 , 1 # i/2
     jal f # f(i/2)
     add $a0 , $0 , $v0 # sovrascrivo a0 on v0 che passero a min
     
     lw $a1 , 4($sp)
     add $a1 , $a1 , -1
     jal g
     add $a1 , $0 , $v0
       	 	 
     jal min	# min (f(i/2), g(i-1), i )
     lw $ra , 0($sp)
     lw $s0 , 4($sp)
     addi $sp , $sp , 8
     jr $ra
 
min:   slt $t0 , $a0 , $a1 # if( a0 < a1) 
       beq $t0 , $0 , min_1 # se e vero allora vado in min 1 
          
       slt $t0 , $a1 , $a2 # if( a1 < a2)
       beq $t0 , $0 , exit_min    
       addi $v0 , $a1 , 0
       jr $ra
       
 min_1: slt $t0, $a0 , $a2 # if(a0 < a2)
 	beq $t0 , $0 , exit_min 
 	addi $v0 , $a0 , 0
 	jr $ra
 
exit_min : addi $v0 , $a2 , 0
 	  jr $ra
       
 exit_1 :  addi $v0 , $0 , 4
 	   jr $ra

 	 	 	 	 	 	
